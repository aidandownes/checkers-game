{"version":3,"sources":["node_modules/browser-pack/_prelude.js","scripts/js/app.js","scripts/js/checkers.js"],"names":[],"mappingsfile":"bundle.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\nconst checkers_1 = require('./checkers');\nexports.AppModule = angular.module('app', [checkers_1.CheckersModule.name]);\n","\"use strict\";\nexports.CheckersModule = angular.module('Checkers', []);\nconst SQUARE_SIZE = 50;\nconst ROW_LENGTH = 8;\nconst COLUMN_LENGTH = 8;\n(function (Color) {\n    Color[Color[\"Black\"] = 0] = \"Black\";\n    Color[Color[\"Red\"] = 1] = \"Red\";\n    Color[Color[\"White\"] = 2] = \"White\";\n})(exports.Color || (exports.Color = {}));\nvar Color = exports.Color;\nfunction toColorString(color) {\n    switch (color) {\n        case Color.Red:\n            return 'red';\n        case Color.Black:\n            return 'black';\n        case Color.White:\n            return 'white';\n        default:\n            throw new Error('Unknown color');\n    }\n}\nfunction* getPossiblePositions() {\n    for (let i = 0; i < ROW_LENGTH; i++) {\n        for (let j = 0; j < COLUMN_LENGTH; j++) {\n            if (i % 2 == j % 2) {\n                yield { row: i, column: j };\n            }\n        }\n    }\n}\nclass Checkers {\n    constructor() {\n        this.pieces = new Array();\n        this.initializePieces();\n        this.currentPlayer = Color.White;\n    }\n    initializePieces() {\n        const isKing = false;\n        const isDragTarget = false;\n        const dragPosition = { x: 0, y: 0 };\n        const addPiece = (square, color) => {\n            this.pieces.push({ square: square, color: color, isKing: isKing, isDragTarget: isDragTarget, dragPosition: dragPosition });\n        };\n        for (let pos of getPossiblePositions()) {\n            if (pos.row < 3) {\n                addPiece(pos, Color.White);\n            }\n            else if (pos.row > 4) {\n                addPiece(pos, Color.Black);\n            }\n        }\n    }\n    getPieceAtSquare(square) {\n        return this.pieces.find(p => {\n            return p.square.column == square.column &&\n                p.square.row == square.row;\n        });\n    }\n}\nexports.Checkers = Checkers;\nclass CheckersProvider {\n    $get($injector) {\n        return $injector.instantiate(Checkers);\n    }\n}\nexports.CheckersProvider = CheckersProvider;\nclass CheckersBoardController {\n    constructor(checkers, $element, $window, $timeout, $log) {\n        this.checkers = checkers;\n        this.$element = $element;\n        this.$window = $window;\n        this.$timeout = $timeout;\n        this.$log = $log;\n        let canvasElement = $element[0].querySelector('canvas');\n        this.canvas = angular.element(canvasElement);\n        this.ctx = canvasElement.getContext('2d');\n        this.canvas.on(\"mousedown\", this.handleMouseDown.bind(this));\n    }\n    $postLink() {\n        this.render();\n    }\n    render() {\n        this.$timeout(() => {\n            this.drawBoard();\n            this.drawPieces();\n        });\n    }\n    handleMouseDown(ev) {\n        let p = this.getMousePosition(ev);\n        let sq = this.getBoardSquare(p);\n        let clickedPiece = this.checkers.getPieceAtSquare(sq);\n        this.$log.debug(`Position ${JSON.stringify(p)}; \n            Square ${JSON.stringify(sq)}; \n            Piece ${JSON.stringify(clickedPiece)}`);\n        if (clickedPiece && clickedPiece.color == this.checkers.currentPlayer) {\n            clickedPiece.isDragTarget = true;\n            clickedPiece.dragPosition = p;\n            this.canvas.on('mousemove', this.handleMouseMove.bind(this, clickedPiece));\n            this.canvas.on('mouseup', this.handleMouseUp.bind(this, clickedPiece));\n            this.render();\n        }\n    }\n    handleMouseMove(clickedPiece, ev) {\n        let p = this.getMousePosition(ev);\n        clickedPiece.dragPosition = p;\n        this.render();\n    }\n    handleMouseUp(clickedPiece, ev) {\n        let p = this.getMousePosition(ev);\n        let sq = this.getBoardSquare(p);\n        clickedPiece.square = sq;\n        clickedPiece.isDragTarget = false;\n        clickedPiece.dragPosition = p;\n        this.canvas.off('mousemove');\n        this.canvas.off('mouseup');\n        this.render();\n    }\n    getMousePosition(ev) {\n        let rect = this.canvas[0].getBoundingClientRect();\n        return {\n            x: ev.clientX - rect.left,\n            y: ev.clientY - rect.top\n        };\n    }\n    getBoardSquare(position) {\n        var row = Math.floor(position.y / SQUARE_SIZE);\n        var column = Math.floor(position.x / SQUARE_SIZE);\n        return { row: row, column: column };\n    }\n    drawPiece(piece) {\n        const halfSquare = (SQUARE_SIZE * 0.5);\n        const x = piece.isDragTarget ? piece.dragPosition.x : piece.square.column * SQUARE_SIZE + halfSquare;\n        const y = piece.isDragTarget ? piece.dragPosition.y : piece.square.row * SQUARE_SIZE + halfSquare;\n        this.ctx.beginPath();\n        this.ctx.fillStyle = toColorString(piece.color);\n        this.ctx.lineWidth = 5;\n        this.ctx.strokeStyle = toColorString(Color.Black);\n        this.ctx.arc(x, y, halfSquare - 10, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.stroke();\n        this.ctx.fill();\n    }\n    drawPieces() {\n        this.checkers.pieces\n            .forEach(piece => this.drawPiece(piece));\n    }\n    drawSquare(row, column) {\n        let color = row % 2 == column % 2 ? Color.Red : Color.Black;\n        let x = row * SQUARE_SIZE;\n        let y = column * SQUARE_SIZE;\n        this.ctx.fillStyle = toColorString(color);\n        this.ctx.fillRect(x, y, SQUARE_SIZE, SQUARE_SIZE);\n    }\n    drawBoard() {\n        for (let i = 0; i < ROW_LENGTH; i++) {\n            for (let j = 0; j < COLUMN_LENGTH; j++) {\n                this.drawSquare(i, j);\n            }\n        }\n    }\n}\nconst CheckersBoard = {\n    template: `<canvas width=\"{{$ctrl.width}}\" height=\"{{$ctrl.height}}\">\n        <span id=\"no_html5\">Your Browser Does Not Support HTML5's Canvas Feature.</span>\n    </canvas>`,\n    bindings: {\n        width: '<',\n        height: '<'\n    },\n    controller: CheckersBoardController\n};\nexports.CheckersModule.provider('checkers', CheckersProvider);\nexports.CheckersModule.component('checkersBoard', CheckersBoard);\n"]}