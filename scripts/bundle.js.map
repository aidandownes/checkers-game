{"version":3,"sources":["node_modules/browser-pack/_prelude.js","scripts/js/app.js","scripts/js/assert.js","scripts/js/checkers-bitboard.js","scripts/js/checkers-board.js","scripts/js/checkers-game-stats.js","scripts/js/checkers-mcts-stats.js","scripts/js/checkers-module.js","scripts/js/checkers-service.js","scripts/js/collections.js","scripts/js/game-model.js","scripts/js/uct.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnarpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbfile":"bundle.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\nvar checkers_module_1 = require('./checkers-module');\nexports.AppModule = angular.module('app', [checkers_module_1.CheckersModule.name, 'ngMaterial']);\nfunction configureThemes($mdThemingProvider) {\n    $mdThemingProvider.theme('default')\n        .primaryPalette('blue')\n        .accentPalette('deep-orange')\n        .backgroundPalette('grey', {\n        'default': '50'\n    });\n    $mdThemingProvider.theme('card-default')\n        .backgroundPalette('grey');\n    $mdThemingProvider.theme('card-blue-dark')\n        .backgroundPalette('blue')\n        .dark();\n    $mdThemingProvider.theme('card-red')\n        .backgroundPalette('red')\n        .dark();\n}\nexports.AppModule.config(configureThemes);\nvar AppController = (function () {\n    function AppController(checkers, $mdSidenav, $scope, $mdDialog) {\n        var _this = this;\n        this.checkers = checkers;\n        this.$mdSidenav = $mdSidenav;\n        this.$scope = $scope;\n        this.$mdDialog = $mdDialog;\n        this.computeOptions = checkers.computeOptions;\n        $scope.$watchCollection(function () { return _this.computeOptions; }, function (newValue, oldValue) {\n            checkers.computeOptions = newValue;\n            _this.isSettingsDirty = !!oldValue;\n        });\n        $scope.$watch(function () { return _this.isSidenavOpen; }, function (newValue, oldValue) {\n            if (!newValue && oldValue && _this.isSettingsDirty) {\n                _this.checkers.reset();\n            }\n            _this.isSettingsDirty = false;\n        });\n        $scope.$watch(function () { return _this.checkers.getWinner(); }, this.onWinner.bind(this));\n    }\n    AppController.prototype.onWinner = function (player) {\n        if (player == this.checkers.humanPlayer) {\n            this.showGameOverDialog(true);\n        }\n        else if (player == this.checkers.computerPlayer) {\n            this.showGameOverDialog(false);\n        }\n    };\n    AppController.prototype.showGameOverDialog = function (winner) {\n        var _this = this;\n        var confirmDetails = this.$mdDialog.confirm()\n            .title('Game Over')\n            .textContent(winner ? 'You won!!' : 'You lost ?!!')\n            .ariaLabel('Game over')\n            .ok('New Game');\n        this.$mdDialog.show(confirmDetails).then(function () {\n            _this.restart();\n        });\n    };\n    AppController.prototype.toggleMenu = function () {\n        this.$mdSidenav('left').toggle();\n    };\n    AppController.prototype.restart = function () {\n        this.checkers.reset();\n    };\n    return AppController;\n}());\nexports.AppModule.controller('AppController', AppController);\n","\"use strict\";\nfunction assert(condition, message) {\n    if (!condition) {\n        throw new Error(message || 'Assert failed');\n    }\n}\nexports.assert = assert;\nfunction assertNotEmpty(list, message) {\n    if (!list || list.length == 0) {\n        throw new Error(message || 'Assert failed: List not empty');\n    }\n}\nexports.assertNotEmpty = assertNotEmpty;\nfunction assertEmpty(list, message) {\n    if (!list || list.length != 0) {\n        throw new Error(message || 'Assert failed: List empty');\n    }\n}\nexports.assertEmpty = assertEmpty;\n","\"use strict\";\nvar game_model_1 = require('./game-model');\nvar Asserts = require('./assert');\nvar S = (function () {\n    var squares = [];\n    for (var i = 0; i < 32; i++) {\n        squares.push(1 << i);\n    }\n    return squares;\n})();\nvar MASK_L3 = S[1] | S[2] | S[3] | S[9] | S[10] | S[11] | S[17] | S[18] | S[19] | S[25] | S[26] | S[27];\nvar MASK_L5 = S[4] | S[5] | S[6] | S[12] | S[13] | S[14] | S[20] | S[21] | S[22];\nvar MASK_R3 = S[28] | S[29] | S[30] | S[20] | S[21] | S[22] | S[12] | S[13] | S[14] | S[4] | S[5] | S[6];\nvar MASK_R5 = S[25] | S[26] | S[27] | S[17] | S[18] | S[19] | S[9] | S[10] | S[11];\nexports.SQUARE_COUNT = 32;\nvar Bitboard = (function () {\n    function Bitboard(whitePieces, blackPieces, kings, player) {\n        if (whitePieces === void 0) { whitePieces = 0xFFF00000; }\n        if (blackPieces === void 0) { blackPieces = 0x00000FFF; }\n        if (kings === void 0) { kings = 0; }\n        if (player === void 0) { player = game_model_1.Player.One; }\n        this.whitePieces = whitePieces;\n        this.blackPieces = blackPieces;\n        this.kings = kings;\n        this.player = player;\n        if (this.player == game_model_1.Player.One) {\n            var canPlay = this.getJumpersWhite(this.whitePieces, this.blackPieces, this.kings) || this.getHoppersWhite();\n            this.winner = canPlay ? game_model_1.Player.None : game_model_1.Player.Two;\n        }\n        else {\n            var canPlay = this.getJumpersBlack(this.whitePieces, this.blackPieces, this.kings) || this.getHoppersBlack();\n            this.winner = canPlay ? game_model_1.Player.None : game_model_1.Player.One;\n        }\n        Asserts.assert((blackPieces & whitePieces) == 0);\n    }\n    Bitboard.prototype.doMove = function (move) {\n        var result = this.tryMove(move);\n        Asserts.assert(result.success, 'Move was not succesful');\n        return result.board;\n    };\n    Bitboard.prototype.doRandomMove = function () {\n        var moves = this.getMoves();\n        Asserts.assertNotEmpty(moves);\n        var randomMoveIndex = Math.floor(Math.random() * moves.length);\n        return this.doMove(moves[randomMoveIndex]);\n    };\n    Bitboard.prototype.hasMoves = function () {\n        return this.getMoves().length > 0;\n    };\n    Bitboard.prototype.getMoves = function () {\n        if (!this.moves) {\n            this.moves = [];\n            var jumpers = (this.player == game_model_1.Player.One) ?\n                this.getJumpersWhite(this.whitePieces, this.blackPieces, this.kings) :\n                this.getJumpersBlack(this.whitePieces, this.blackPieces, this.kings);\n            for (var i = 0; i < exports.SQUARE_COUNT; i++) {\n                if (S[i] & jumpers) {\n                    Array.prototype.push.apply(this.moves, this.getJumpMoves(i));\n                }\n            }\n            if (this.moves.length == 0) {\n                var hoppers = (this.player == game_model_1.Player.One) ?\n                    this.getHoppersWhite() :\n                    this.getHoppersBlack();\n                for (var i = 0; i < exports.SQUARE_COUNT; i++) {\n                    if (S[i] & hoppers) {\n                        Array.prototype.push.apply(this.moves, this.getHopMoves(i));\n                    }\n                }\n            }\n        }\n        return this.moves;\n    };\n    Bitboard.prototype.getResult = function (player) {\n        Asserts.assert(this.winner == game_model_1.Player.One || this.winner == game_model_1.Player.Two);\n        return this.winner == player ? game_model_1.Result.Win : game_model_1.Result.Lose;\n    };\n    Bitboard.prototype.getPlayerToMove = function () {\n        return this.player;\n    };\n    Bitboard.prototype.getOpponent = function (player) {\n        switch (player) {\n            case game_model_1.Player.One:\n                return game_model_1.Player.Two;\n            case game_model_1.Player.Two:\n                return game_model_1.Player.One;\n            default:\n                return game_model_1.Player.None;\n        }\n    };\n    Bitboard.prototype.getPlayerAtSquare = function (square) {\n        var mask = S[square];\n        if (this.whitePieces & mask) {\n            return game_model_1.Player.One;\n        }\n        else if (this.blackPieces & mask) {\n            return game_model_1.Player.Two;\n        }\n        else {\n            return game_model_1.Player.None;\n        }\n    };\n    Bitboard.prototype.isKing = function (square) {\n        var mask = S[square];\n        return !!(this.kings & mask);\n    };\n    Bitboard.prototype.getHopMoves = function (source) {\n        var moves = [];\n        var mask = S[source];\n        var notOccupied = ~(this.whitePieces | this.blackPieces);\n        var isKing = mask & this.kings;\n        var player = this.player;\n        var hops = 0;\n        if (isKing || (player == game_model_1.Player.One)) {\n            hops |= (mask >>> 4) & notOccupied;\n            hops |= ((mask & MASK_R3) >>> 3) & notOccupied;\n            hops |= ((mask & MASK_R5) >>> 5) & notOccupied;\n        }\n        if (isKing || (player == game_model_1.Player.Two)) {\n            hops |= (mask << 4) & notOccupied;\n            hops |= ((mask & MASK_L3) << 3) & notOccupied;\n            hops |= ((mask & MASK_L5) << 5) & notOccupied;\n        }\n        for (var destination = 0; destination < 32; destination++) {\n            if (S[destination] & hops) {\n                moves.push({ source: source, destination: destination, player: player });\n            }\n        }\n        return moves;\n    };\n    Bitboard.prototype.rightJump = function (opponentPieces, notOccupied, mask) {\n        var jumps = 0;\n        var temp = (mask >>> 4) & opponentPieces;\n        jumps |= (((temp & MASK_R3) >>> 3) | ((temp & MASK_R5) >>> 5)) & notOccupied;\n        temp = (((mask & MASK_R3) >>> 3) | ((mask & MASK_R5) >>> 5)) & opponentPieces;\n        jumps |= (temp >>> 4) & notOccupied;\n        return jumps;\n    };\n    Bitboard.prototype.leftJump = function (opponentPieces, notOccupied, mask) {\n        var jumps = 0;\n        var temp = (mask << 4) & opponentPieces;\n        jumps |= (((temp & MASK_L3) << 3) | ((temp & MASK_L5) << 5)) & notOccupied;\n        temp = (((mask & MASK_L3) << 3) | ((mask & MASK_L5) << 5)) & opponentPieces;\n        jumps |= (temp << 4) & notOccupied;\n        return jumps;\n    };\n    Bitboard.prototype.getJumpMoves = function (source) {\n        var moves = [];\n        var mask = S[source];\n        var notOccupied = ~(this.whitePieces | this.blackPieces);\n        var isKing = mask & this.kings;\n        var player = this.player;\n        var jumps = 0;\n        if (player == game_model_1.Player.One) {\n            jumps |= this.rightJump(this.blackPieces, notOccupied, mask);\n            if (isKing) {\n                jumps |= this.leftJump(this.blackPieces, notOccupied, mask);\n            }\n        }\n        else if (player == game_model_1.Player.Two) {\n            jumps |= this.leftJump(this.whitePieces, notOccupied, mask);\n            if (isKing) {\n                jumps |= this.rightJump(this.whitePieces, notOccupied, mask);\n            }\n        }\n        for (var destination = 0; destination < 32; destination++) {\n            if (S[destination] & jumps) {\n                moves.push({ source: source, destination: destination, player: player });\n            }\n        }\n        return moves;\n    };\n    Bitboard.prototype.getHoppersWhite = function () {\n        if (this.player != game_model_1.Player.One) {\n            return 0;\n        }\n        var notOccupied = ~(this.whitePieces | this.blackPieces);\n        var kingPieces = this.whitePieces & this.kings;\n        var movers = (notOccupied << 4) & this.whitePieces;\n        movers |= ((notOccupied & MASK_L3) << 3) & this.whitePieces;\n        movers |= ((notOccupied & MASK_L5) << 5) & this.whitePieces;\n        if (kingPieces) {\n            movers |= (notOccupied >>> 4) & kingPieces;\n            movers |= ((notOccupied & MASK_R3) >>> 3) & kingPieces;\n            movers |= ((notOccupied & MASK_R5) >>> 5) & kingPieces;\n        }\n        return movers;\n    };\n    Bitboard.prototype.getHoppersBlack = function () {\n        if (this.player != game_model_1.Player.Two) {\n            return 0;\n        }\n        var notOccupied = ~(this.whitePieces | this.blackPieces);\n        var kingPieces = this.blackPieces & this.kings;\n        var movers = (notOccupied >>> 4) & this.blackPieces;\n        movers |= ((notOccupied & MASK_R3) >>> 3) & this.blackPieces;\n        movers |= ((notOccupied & MASK_R5) >>> 5) & this.blackPieces;\n        if (kingPieces) {\n            movers |= (notOccupied << 4) & kingPieces;\n            movers |= ((notOccupied & MASK_L3) << 3) & kingPieces;\n            movers |= ((notOccupied & MASK_L5) << 5) & kingPieces;\n        }\n        return movers;\n    };\n    Bitboard.prototype.getJumpersWhite = function (whitePieces, blackPieces, kings) {\n        var notOccupied = ~(whitePieces | blackPieces);\n        var kingPieces = whitePieces & kings;\n        var movers = 0;\n        var temp = (notOccupied << 4) & blackPieces;\n        movers |= (((temp & MASK_L3) << 3) | ((temp & MASK_L5) << 5)) & whitePieces;\n        temp = (((notOccupied & MASK_L3) << 3) | ((notOccupied & MASK_L5) << 5)) & blackPieces;\n        movers |= (temp << 4) & whitePieces;\n        if (kingPieces) {\n            temp = (notOccupied >>> 4) & blackPieces;\n            movers |= (((temp & MASK_R3) >>> 3) | ((temp & MASK_R5) >>> 5)) & kingPieces;\n            temp = (((notOccupied & MASK_R3) >>> 3) | ((notOccupied & MASK_R5) >>> 5)) & blackPieces;\n            movers |= (temp >>> 4) & kingPieces;\n        }\n        return movers;\n    };\n    Bitboard.prototype.getJumpersBlack = function (whitePieces, blackPieces, kings) {\n        var notOccupied = ~(whitePieces | blackPieces);\n        var kingPieces = blackPieces & kings;\n        var movers = 0;\n        var temp = (notOccupied >>> 4) & whitePieces;\n        movers |= (((temp & MASK_R3) >>> 3) | ((temp & MASK_R5) >>> 5)) & blackPieces;\n        temp = (((notOccupied & MASK_R3) >>> 3) | ((notOccupied & MASK_R5) >>> 5)) & whitePieces;\n        movers |= (temp >>> 4) & blackPieces;\n        if (kingPieces) {\n            temp = (notOccupied << 4) & whitePieces;\n            movers |= (((temp & MASK_L3) << 3) | ((temp & MASK_L5) << 5)) & kingPieces;\n            temp = (((notOccupied & MASK_L3) << 3) | ((notOccupied & MASK_L5) << 5)) & whitePieces;\n            movers |= (temp << 4) & kingPieces;\n        }\n        return movers;\n    };\n    Bitboard.prototype.tryStep = function (source, destination) {\n        var sourceMask = S[source];\n        var destinationMask = S[destination];\n        var isKing = sourceMask & this.kings;\n        if (this.player == game_model_1.Player.One) {\n            var canMove = (destinationMask << 4) & sourceMask;\n            canMove |= ((destinationMask & MASK_L3) << 3) & sourceMask;\n            canMove |= ((destinationMask & MASK_L5) << 5) & sourceMask;\n            if (isKing) {\n                canMove |= (destinationMask >>> 4) & sourceMask;\n                canMove |= ((destinationMask & MASK_R3) >>> 3) & sourceMask;\n                canMove |= ((destinationMask & MASK_R5) >>> 5) & sourceMask;\n            }\n            if (canMove) {\n                var whitePieces = (this.whitePieces | destinationMask) ^ sourceMask;\n                var blackPieces = this.blackPieces;\n                var kings = isKing ?\n                    (this.kings | destinationMask) ^ sourceMask :\n                    this.kings | (destinationMask & 0xF);\n                var player = game_model_1.Player.Two;\n                return {\n                    success: true,\n                    board: new Bitboard(whitePieces, blackPieces, kings, player)\n                };\n            }\n        }\n        else if (this.player = game_model_1.Player.Two) {\n            var canMove = (destinationMask >>> 4) & sourceMask;\n            canMove |= ((destinationMask & MASK_R3) >>> 3) & sourceMask;\n            canMove |= ((destinationMask & MASK_R5) >>> 5) & sourceMask;\n            if (isKing) {\n                canMove |= (destinationMask << 4) & sourceMask;\n                canMove |= ((destinationMask & MASK_L3) << 3) & sourceMask;\n                canMove |= ((destinationMask & MASK_L5) << 5) & sourceMask;\n            }\n            if (canMove) {\n                var whitePieces = this.whitePieces;\n                var blackPieces = (this.blackPieces | destinationMask) ^ sourceMask;\n                var kings = isKing ?\n                    (this.kings | destinationMask) ^ sourceMask :\n                    this.kings | (destinationMask & 0xF0000000);\n                var player = game_model_1.Player.One;\n                return {\n                    success: true,\n                    board: new Bitboard(whitePieces, blackPieces, kings, player)\n                };\n            }\n        }\n        return { success: false };\n    };\n    Bitboard.prototype.tryJump = function (source, destination) {\n        var sourceMask = S[source];\n        var destinationMask = S[destination];\n        var isKing = sourceMask & this.kings;\n        if (this.player == game_model_1.Player.One) {\n            var canJump = void 0;\n            var temp = (destinationMask << 4) & this.blackPieces;\n            canJump = (((temp & MASK_L3) << 3) | ((temp & MASK_L5) << 5)) & sourceMask;\n            if (!canJump) {\n                temp = (((destinationMask & MASK_L3) << 3) | ((destinationMask & MASK_L5) << 5)) & this.blackPieces;\n                canJump = (temp << 4) & sourceMask;\n            }\n            if (!canJump && isKing) {\n                temp = (destinationMask >>> 4) & this.blackPieces;\n                canJump = (((temp & MASK_R3) >>> 3) | ((temp & MASK_R5) >>> 5)) & sourceMask;\n            }\n            if (!canJump && isKing) {\n                temp = (((destinationMask & MASK_R3) >>> 3) | ((destinationMask & MASK_R5) >>> 5)) & this.blackPieces;\n                canJump = (temp >> 4) & sourceMask;\n            }\n            if (canJump) {\n                var whitePieces = (this.whitePieces | destinationMask) ^ sourceMask;\n                var blackPieces = this.blackPieces ^ temp;\n                var kings = (this.kings & sourceMask) ?\n                    (this.kings | destinationMask) ^ sourceMask :\n                    this.kings | (destinationMask & 0xF);\n                if (kings & temp) {\n                    kings = kings ^ temp;\n                }\n                var canJumpAgain = !(destinationMask & 0xF) &&\n                    (this.getJumpersWhite(whitePieces, blackPieces, kings) & destinationMask);\n                var player = canJumpAgain ? game_model_1.Player.One : game_model_1.Player.Two;\n                return {\n                    success: true,\n                    board: new Bitboard(whitePieces, blackPieces, kings, player)\n                };\n            }\n        }\n        else if (this.player == game_model_1.Player.Two) {\n            var canJump = void 0;\n            var temp = (destinationMask >>> 4) & this.whitePieces;\n            canJump = (((temp & MASK_R3) >>> 3) | ((temp & MASK_R5) >>> 5)) & sourceMask;\n            if (!canJump) {\n                temp = (((destinationMask & MASK_R3) >>> 3) | ((destinationMask & MASK_R5) >>> 5)) & this.whitePieces;\n                canJump = (temp >>> 4) & sourceMask;\n            }\n            if (!canJump && isKing) {\n                temp = (destinationMask << 4) & this.whitePieces;\n                canJump = (((temp & MASK_L3) << 3) | ((temp & MASK_L5) << 5)) & sourceMask;\n            }\n            if (!canJump && isKing) {\n                temp = (((destinationMask & MASK_L3) << 3) | ((destinationMask & MASK_L5) << 5)) & this.whitePieces;\n                canJump = (temp << 4) & sourceMask;\n            }\n            if (canJump) {\n                var whitePieces = this.whitePieces ^ temp;\n                var blackPieces = (this.blackPieces | destinationMask) ^ sourceMask;\n                var kings = (this.kings & sourceMask) ?\n                    (this.kings | destinationMask) ^ sourceMask :\n                    this.kings | (destinationMask & 0xF0000000);\n                if (kings & temp) {\n                    kings = kings ^ temp;\n                }\n                var canJumpAgain = !(destinationMask & 0xF0000000) &&\n                    (this.getJumpersBlack(whitePieces, blackPieces, kings) & destinationMask);\n                var player = canJumpAgain ? game_model_1.Player.Two : game_model_1.Player.One;\n                return {\n                    success: true,\n                    board: new Bitboard(whitePieces, blackPieces, kings, player)\n                };\n            }\n        }\n        return { success: false };\n    };\n    Bitboard.prototype.tryMove = function (move) {\n        var failureResult = { success: false };\n        var sourceMask = S[move.source];\n        var destinationMask = S[move.destination];\n        var isKing = sourceMask & this.kings;\n        if (this.winner != game_model_1.Player.None) {\n            failureResult.message = 'Game is over';\n            return failureResult;\n        }\n        if (this.player != this.getPlayerAtSquare(move.source)) {\n            failureResult.message = 'Wrong player move';\n            return failureResult;\n        }\n        if (this.getPlayerAtSquare(move.destination) != game_model_1.Player.None) {\n            failureResult.message = 'Destination is not empty';\n            return failureResult;\n        }\n        var jumpers = this.player == game_model_1.Player.One ?\n            this.getJumpersWhite(this.whitePieces, this.blackPieces, this.kings) :\n            this.getJumpersBlack(this.whitePieces, this.blackPieces, this.kings);\n        if (jumpers) {\n            var shouldJump = jumpers & sourceMask;\n            if (shouldJump) {\n                return this.tryJump(move.source, move.destination);\n            }\n            else {\n                failureResult.message = 'Player should jump';\n                return failureResult;\n            }\n        }\n        return this.tryStep(move.source, move.destination);\n    };\n    Bitboard.prototype.toString = function () {\n        var _this = this;\n        var buffer = [];\n        var prependSpace = false;\n        var getPieceString = function (index) {\n            var mask = S[index];\n            var pieceString = '__';\n            if (mask & _this.blackPieces) {\n                pieceString = (mask & _this.kings) ? 'BK' : 'BP';\n            }\n            else if (mask & _this.whitePieces) {\n                pieceString = (mask & _this.kings) ? 'WK' : 'WP';\n            }\n            return pieceString;\n        };\n        for (var i = 0; i < exports.SQUARE_COUNT; i += 4) {\n            var lineBuffer = [];\n            for (var j = i; j < i + 4; j++) {\n                if (prependSpace) {\n                    lineBuffer.push(' ');\n                }\n                lineBuffer.push(getPieceString(j));\n                if (!prependSpace) {\n                    lineBuffer.push(' ');\n                }\n            }\n            lineBuffer.push('\\n');\n            prependSpace = !prependSpace;\n            buffer.splice(0, 0, lineBuffer.join(' '));\n        }\n        return buffer.join(' ');\n    };\n    return Bitboard;\n}());\nexports.Bitboard = Bitboard;\n","\"use strict\";\nvar checkers_bitboard_1 = require('./checkers-bitboard');\nvar game_model_1 = require('./game-model');\nvar collections_1 = require('./collections');\nvar asserts = require('./assert');\nvar ROW_LENGTH = 8;\nvar COLUMN_LENGTH = 8;\nvar DraggingClass = 'cb-dragging';\nvar DragClass = 'cb-drag';\nvar Point = (function () {\n    function Point(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    Point.prototype.add = function (other) {\n        return new Point(this.x + other.x, this.y + other.y);\n    };\n    Point.prototype.subtract = function (other) {\n        return new Point(this.x - other.x, this.y - other.y);\n    };\n    return Point;\n}());\nvar BoardSquareArray = (function () {\n    var squares = [];\n    for (var i = 0; i < ROW_LENGTH; i++) {\n        var mod2 = i % 2;\n        for (var j = 7 - mod2; j > 0 - mod2; j -= 2) {\n            squares.push({ row: i, column: j });\n        }\n    }\n    return squares.reverse();\n})();\nfunction toPosition(square, squareSize) {\n    var boardSquare = BoardSquareArray[square];\n    var x = boardSquare.column * squareSize;\n    var y = boardSquare.row * squareSize;\n    return new Point(x, y);\n}\nfunction toSquare(position, squareSize) {\n    var row = Math.floor(position.y / squareSize);\n    var column = Math.floor(position.x / squareSize);\n    return collections_1.Arrays.findIndex(BoardSquareArray, function (bs) { return bs.column == column && bs.row == row; });\n}\nvar CheckersBoardController = (function () {\n    function CheckersBoardController(checkers, $element, $window, $log, $scope, $q) {\n        var _this = this;\n        this.checkers = checkers;\n        this.$element = $element;\n        this.$window = $window;\n        this.$log = $log;\n        this.$scope = $scope;\n        this.$q = $q;\n        this.canvasElement = $element[0].querySelector('canvas');\n        this.canvas = angular.element(this.canvasElement);\n        this.ctx = this.canvasElement.getContext('2d');\n        this.canvas.on('mousedown', this.handleMouseDown.bind(this));\n        this.canvas.on('mousemove', this.handleMouseMove.bind(this));\n        this.canvas.on('mouseup', this.handleMouseUp.bind(this));\n        this.canvasElement.addEventListener('touchstart', function (e) {\n            var p = _this.getTouchPoint(e);\n            _this.startDrag(p);\n        });\n        this.canvasElement.addEventListener('touchmove', function (e) {\n            var p = _this.getTouchPoint(e);\n            _this.updateDrag(p);\n        });\n        this.canvasElement.addEventListener('touchend', function (e) {\n            _this.endDrag(_this.dragPosition);\n        });\n        $scope.$watch(function () { return _this.$element.width(); }, this.resize.bind(this));\n        $scope.$watch(function () { return _this.checkers.getCurrentBoard(); }, this.onBoardUpdated.bind(this));\n    }\n    CheckersBoardController.prototype.$postLink = function () {\n        this.spritesPromise = this.loadImage(this.spritesImageUrl);\n        this.render();\n    };\n    CheckersBoardController.prototype.onBoardUpdated = function (board) {\n        this.playableSquares = this.checkers.getPlayablePieces();\n        this.render();\n    };\n    CheckersBoardController.prototype.loadImage = function (src) {\n        var defer = this.$q.defer();\n        var img = new Image();\n        img.src = src;\n        img.onload = function (ev) {\n            defer.resolve(img);\n        };\n        return defer.promise;\n    };\n    CheckersBoardController.prototype.render = function () {\n        var _this = this;\n        this.spritesPromise.then(function () {\n            _this.drawBoard();\n            _this.drawPieces(_this.checkers.getCurrentBoard());\n        });\n    };\n    CheckersBoardController.prototype.resize = function () {\n        var width = this.$element.width();\n        var height = this.$element.height();\n        if (width > height) {\n            this.size = height;\n        }\n        else {\n            this.size = width;\n        }\n        this.squareSize = this.size / ROW_LENGTH;\n        this.canvasElement.width = this.size;\n        this.canvasElement.height = this.size;\n        if (width != 0 && height != 0) {\n            this.render();\n        }\n    };\n    CheckersBoardController.prototype.startDrag = function (p) {\n        var sourceSquare = toSquare(p, this.squareSize);\n        var player = this.checkers.getCurrentBoard().getPlayerAtSquare(sourceSquare);\n        if (player == this.checkers.getCurrentBoard().player) {\n            var squarePosition = toPosition(sourceSquare, this.squareSize);\n            this.isDragging = true;\n            this.dragTarget = sourceSquare;\n            this.dragPosition = p;\n            this.dragTranslation = p.subtract(squarePosition);\n            this.canvas.addClass(DraggingClass);\n            this.canvas.removeClass(DragClass);\n            this.render();\n        }\n    };\n    CheckersBoardController.prototype.endDrag = function (p) {\n        if (!this.isDragging) {\n            return;\n        }\n        var destinationSquare = toSquare(p, this.squareSize);\n        if (destinationSquare >= 0) {\n            this.checkers.tryMove(this.dragTarget, destinationSquare);\n        }\n        this.isDragging = false;\n        this.dragTarget = -1;\n        this.dragPosition = null;\n        this.canvas.removeClass(DraggingClass);\n        this.render();\n    };\n    CheckersBoardController.prototype.updateDrag = function (p) {\n        if (this.isDragging) {\n            this.dragPosition = p;\n            this.render();\n        }\n        else {\n            var sourceSquare = toSquare(p, this.squareSize);\n            if (this.playableSquares.indexOf(sourceSquare) < 0) {\n                this.canvas.removeClass(DragClass);\n            }\n            else {\n                this.canvas.addClass(DragClass);\n            }\n        }\n    };\n    CheckersBoardController.prototype.handleMouseDown = function (ev) {\n        this.startDrag(this.getMousePoint(ev));\n    };\n    CheckersBoardController.prototype.handleMouseMove = function (ev) {\n        this.updateDrag(this.getMousePoint(ev));\n    };\n    CheckersBoardController.prototype.handleMouseUp = function (ev) {\n        this.endDrag(this.getMousePoint(ev));\n    };\n    CheckersBoardController.prototype.getMousePoint = function (ev) {\n        var rect = this.canvasElement.getBoundingClientRect();\n        return new Point(ev.clientX - rect.left, ev.clientY - rect.top);\n    };\n    CheckersBoardController.prototype.getTouchPoint = function (ev) {\n        var rect = this.canvasElement.getBoundingClientRect();\n        var touches = ev.touches;\n        var touch = touches[0];\n        return new Point(touch.clientX - rect.left, touch.clientY - rect.top);\n    };\n    CheckersBoardController.prototype.drawPiece = function (point, player, isKing, translation) {\n        var _this = this;\n        this.spritesPromise.then(function (img) {\n            var sourceX = isKing ? (2 * 50) : 0;\n            if (player == game_model_1.Player.One) {\n                sourceX += 50;\n            }\n            var drawPoint = point;\n            if (translation) {\n                drawPoint = drawPoint.subtract(translation);\n            }\n            asserts.assert(img.width >= sourceX + _this.spriteSize, 'Attempting to access outside sprite region');\n            asserts.assert(img.height >= 0 + _this.spriteSize, 'Attempting to access outside sprite region');\n            asserts.assert(_this.canvasElement.width >= drawPoint.x + _this.squareSize, 'Drawing outside canvas');\n            asserts.assert(_this.canvasElement.height >= drawPoint.y + _this.squareSize, 'Drawing outside canvas');\n            _this.ctx.drawImage(img, sourceX, 0, _this.spriteSize, _this.spriteSize, drawPoint.x, drawPoint.y, _this.squareSize, _this.squareSize);\n        });\n    };\n    CheckersBoardController.prototype.drawPieces = function (bitboard) {\n        var drawDragTarget;\n        for (var i = 0; i < checkers_bitboard_1.SQUARE_COUNT; i++) {\n            var player = bitboard.getPlayerAtSquare(i);\n            if (player == game_model_1.Player.None) {\n                continue;\n            }\n            var isKing = bitboard.isKing(i);\n            if (i == this.dragTarget) {\n                drawDragTarget = this.drawPiece.bind(this, this.dragPosition, player, isKing, this.dragTranslation);\n            }\n            else {\n                var position = toPosition(i, this.squareSize);\n                this.drawPiece(position, player, isKing);\n            }\n        }\n        if (drawDragTarget) {\n            drawDragTarget();\n        }\n    };\n    CheckersBoardController.prototype.drawSquare = function (square) {\n        var position = toPosition(square, this.squareSize);\n        this.ctx.fillStyle = '#000';\n        this.ctx.fillRect(position.x, position.y, this.squareSize, this.squareSize);\n    };\n    CheckersBoardController.prototype.highlightSquare = function (square) {\n        var position = toPosition(square, this.squareSize);\n        this.ctx.strokeStyle = '#FF5722';\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(position.x, position.y, this.squareSize, this.squareSize);\n    };\n    CheckersBoardController.prototype.drawBoard = function () {\n        this.ctx.fillStyle = '#FFF';\n        this.ctx.fillRect(0, 0, this.canvasElement.width, this.canvasElement.height);\n        for (var i = 0; i < checkers_bitboard_1.SQUARE_COUNT; i++) {\n            this.drawSquare(i);\n        }\n        var lastMove = this.checkers.lastMove;\n        if (lastMove) {\n            this.highlightSquare(lastMove.source);\n            this.highlightSquare(lastMove.destination);\n        }\n    };\n    return CheckersBoardController;\n}());\nexports.CheckersBoard = {\n    template: \"<canvas>\\n        <span id=\\\"no_html5\\\">Your Browser Does Not Support HTML5's Canvas Feature.</span>\\n    </canvas>\",\n    bindings: {\n        spritesImageUrl: '@',\n        spriteSize: '<'\n    },\n    controller: CheckersBoardController\n};\n","\"use strict\";\nvar game_model_1 = require('./game-model');\nvar GameStatsController = (function () {\n    function GameStatsController(checkers, $interval) {\n        var _this = this;\n        this.checkers = checkers;\n        this.$interval = $interval;\n        this.$interval(function () {\n            var endTime = new Date();\n            _this.playTime = (endTime.getTime() - _this.checkers.startTime) / 1000;\n        }, 1000);\n    }\n    GameStatsController.prototype.getCurrentPlayer = function () {\n        switch (this.checkers.getCurrentPlayer()) {\n            case game_model_1.Player.One:\n                return 'White';\n            case game_model_1.Player.Two:\n                return 'Black';\n            default:\n                throw new Error('Unexpected player');\n        }\n    };\n    GameStatsController.prototype.undoMove = function () {\n        return false;\n    };\n    GameStatsController.prototype.getPlayTime = function () {\n        return this.playTime;\n    };\n    return GameStatsController;\n}());\nfunction TimeFormatFilter() {\n    return function (value) {\n        value = value || 0;\n        var seconds = Math.round(value % 60);\n        value = Math.floor(value / 60);\n        var minutes = Math.round(value % 60);\n        value = Math.floor(value / 60);\n        var hours = Math.round(value % 24);\n        value = Math.floor(value / 24);\n        var days = value;\n        if (days) {\n            return days + \" days, \" + hours + \" hrs, \" + minutes + \" mins, \" + seconds + \" secs\";\n        }\n        else if (hours) {\n            return hours + \" hrs, \" + minutes + \" mins, \" + seconds + \" secs\";\n        }\n        else if (minutes) {\n            return minutes == 1 ? minutes + \" mins, \" + seconds + \" secs\" : minutes + \" mins, \" + seconds + \" secs\";\n        }\n        else {\n            return seconds + \" secs\";\n        }\n    };\n}\nexports.TimeFormatFilter = TimeFormatFilter;\n;\nexports.CheckersGameStats = {\n    templateUrl: 'templates/game-stats.ng',\n    controller: GameStatsController\n};\n","\"use strict\";\nvar MctsStatsController = (function () {\n    function MctsStatsController(checkers, $scope) {\n        var _this = this;\n        this.checkers = checkers;\n        this.$scope = $scope;\n        $scope.$watch(function () { return checkers.searchResult; }, function (searchResult) {\n            _this.searchResult = searchResult;\n        });\n    }\n    MctsStatsController.prototype.getWinPercentage = function () {\n        return this.searchResult ?\n            (1 - this.searchResult.winProbabilty) * 100 :\n            50;\n    };\n    MctsStatsController.prototype.getTime = function () {\n        return this.searchResult ?\n            this.searchResult.time : 0;\n    };\n    MctsStatsController.prototype.getIterations = function () {\n        return this.searchResult ?\n            this.searchResult.iterations : 0;\n    };\n    return MctsStatsController;\n}());\nexports.CheckersMctsStats = {\n    templateUrl: 'templates/mcts-stats.ng',\n    controller: MctsStatsController\n};\n","\"use strict\";\nvar checkers_service_1 = require('./checkers-service');\nvar checkers_board_1 = require('./checkers-board');\nvar checkers_game_stats_1 = require('./checkers-game-stats');\nvar checkers_mcts_stats_1 = require('./checkers-mcts-stats');\nvar uct_1 = require('./uct');\nexports.CheckersModule = angular.module('Checkers', [uct_1.UctSearchModule.name]);\nexports.CheckersModule.provider('checkers', checkers_service_1.CheckersProvider);\nexports.CheckersModule.component('checkersBoard', checkers_board_1.CheckersBoard);\nexports.CheckersModule.component('checkersGameStats', checkers_game_stats_1.CheckersGameStats);\nexports.CheckersModule.component('checkersMctsStats', checkers_mcts_stats_1.CheckersMctsStats);\nexports.CheckersModule.filter('timeFilter', checkers_game_stats_1.TimeFormatFilter);\n","\"use strict\";\nvar checkers_bitboard_1 = require('./checkers-bitboard');\nvar game_model_1 = require('./game-model');\nvar uct_1 = require('./uct');\nexports.UctSearchService = uct_1.UctSearchService;\nvar game_model_2 = require('./game-model');\nexports.Player = game_model_2.Player;\nvar DEFAULT_MAX_TIME_MS = 500;\nvar DEFAULT_MAX_ITERATIONS = 10000;\nvar Checkers = (function () {\n    function Checkers($timeout, uctSearchService) {\n        this.$timeout = $timeout;\n        this.uctSearchService = uctSearchService;\n        this.computerPlayer = game_model_1.Player.Two;\n        this.humanPlayer = game_model_1.Player.One;\n        this.computeOptions = {\n            maxIterations: DEFAULT_MAX_ITERATIONS,\n            maxTime: DEFAULT_MAX_TIME_MS\n        };\n        this.reset();\n    }\n    Checkers.prototype.reset = function () {\n        this.boards = [];\n        this.boards.push(new checkers_bitboard_1.Bitboard());\n        this.startTime = (new Date()).getTime();\n        this.searchResult = null;\n        this.lastMove = null;\n    };\n    Checkers.prototype.getCurrentPlayer = function () {\n        return this.getCurrentBoard().player;\n    };\n    Checkers.prototype.getCurrentBoard = function () {\n        return this.boards[this.boards.length - 1];\n    };\n    Checkers.prototype.getPlayablePieces = function () {\n        if (this.getCurrentPlayer() != this.humanPlayer) {\n            return [];\n        }\n        return this.getCurrentBoard().getMoves().map(function (m) { return m.source; });\n    };\n    Checkers.prototype.getOpponent = function (player) {\n        if (player == game_model_1.Player.None)\n            return game_model_1.Player.None;\n        return player == game_model_1.Player.One ? game_model_1.Player.Two : game_model_1.Player.One;\n    };\n    Checkers.prototype.tryMove = function (source, destination) {\n        var currentBoard = this.getCurrentBoard();\n        var move = { source: source, destination: destination, player: currentBoard.player };\n        var _a = currentBoard.tryMove(move), success = _a.success, board = _a.board;\n        if (success) {\n            this.boards.push(board);\n            this.lastMove = move;\n            if (board.player == this.computerPlayer) {\n                this.$timeout(this.doComputerPlayerMove.bind(this), 500);\n            }\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    Checkers.prototype.getWinner = function () {\n        var board = this.getCurrentBoard();\n        return board.winner;\n    };\n    Checkers.prototype.doComputerPlayerMove = function () {\n        this.searchResult = this.uctSearchService.search(this.getCurrentBoard(), this.computeOptions.maxIterations, this.computeOptions.maxTime);\n        if (this.searchResult.move) {\n            var move = this.searchResult.move;\n            this.tryMove(move.source, move.destination);\n        }\n    };\n    return Checkers;\n}());\nexports.Checkers = Checkers;\nvar CheckersProvider = (function () {\n    function CheckersProvider() {\n    }\n    CheckersProvider.prototype.$get = function ($injector) {\n        return $injector.instantiate(Checkers);\n    };\n    return CheckersProvider;\n}());\nexports.CheckersProvider = CheckersProvider;\n","\"use strict\";\nvar Arrays = (function () {\n    function Arrays() {\n    }\n    Arrays.max = function (arr, compare) {\n        var len = arr.length;\n        var max;\n        while (len--) {\n            if (max == undefined) {\n                max = arr[len];\n            }\n            else if (compare(arr[len], max)) {\n                max = arr[len];\n            }\n        }\n        return max;\n    };\n    Arrays.findIndex = function (arr, predicate) {\n        for (var i = 0; i < arr.length; i++) {\n            if (predicate(arr[i])) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    return Arrays;\n}());\nexports.Arrays = Arrays;\nvar ListNode = (function () {\n    function ListNode(data, next) {\n        this.data = data;\n        this.next = next;\n    }\n    return ListNode;\n}());\nvar List = (function () {\n    function List(iterable) {\n        var _this = this;\n        this.size = 0;\n        if (iterable) {\n            iterable.forEach(function (t) { return _this.add(t); });\n        }\n    }\n    List.prototype.add = function (data) {\n        if (!this.start) {\n            this.start = new ListNode(data);\n            this.end = this.start;\n        }\n        else {\n            this.end.next = new ListNode(data);\n            this.end = this.end.next;\n        }\n        this.size++;\n    };\n    List.prototype.delete = function (data) {\n        var current = this.start;\n        var previous = this.start;\n        while (current) {\n            if (data === current.data) {\n                this.size--;\n                if (current === this.start) {\n                    this.start = current.next;\n                    return;\n                }\n                if (current === this.end) {\n                    this.end = previous;\n                }\n                previous.next = current.next;\n                return;\n            }\n            previous = current;\n            current = current.next;\n        }\n    };\n    List.prototype.item = function (index) {\n        var current = this.start;\n        while (current) {\n            if (index === 0) {\n                return current.data;\n            }\n            current = current.next;\n            index--;\n        }\n    };\n    List.prototype.forEach = function (f) {\n        var current = this.start;\n        while (current) {\n            f(current.data);\n            current = current.next;\n        }\n    };\n    List.prototype.getSize = function () {\n        return this.size;\n    };\n    return List;\n}());\nexports.List = List;\n","\"use strict\";\n(function (Player) {\n    Player[Player[\"None\"] = 0] = \"None\";\n    Player[Player[\"One\"] = 1] = \"One\";\n    Player[Player[\"Two\"] = 2] = \"Two\";\n})(exports.Player || (exports.Player = {}));\nvar Player = exports.Player;\n(function (Result) {\n    Result[Result[\"Win\"] = 0] = \"Win\";\n    Result[Result[\"Lose\"] = 1] = \"Lose\";\n    Result[Result[\"Draw\"] = 2] = \"Draw\";\n})(exports.Result || (exports.Result = {}));\nvar Result = exports.Result;\n","\"use strict\";\nvar asserts = require('./assert');\nvar game_model_1 = require('./game-model');\nvar collections_1 = require('./collections');\nvar C = 1.44;\nfunction getRandomInteger(upperBounds) {\n    return Math.floor(Math.random() * upperBounds);\n}\nvar Node = (function () {\n    function Node(parent, state, move) {\n        this.parent = parent;\n        this.state = state;\n        this.move = move;\n        this.children = [];\n        this.wins = 0;\n        this.visits = 0;\n        this.uctScore = 0;\n        this.confidence = 0;\n        this.validMoves = new collections_1.List(state.getMoves());\n        this.isTerminal = this.validMoves.getSize() == 0;\n    }\n    Node.prototype.isfullyExpanded = function () {\n        return this.validMoves.getSize() == 0;\n    };\n    Node.prototype.getUntriedMove = function () {\n        var index = getRandomInteger(this.validMoves.getSize());\n        var move = this.validMoves.item(index);\n        this.validMoves.delete(move);\n        return move;\n    };\n    Node.prototype.addChild = function (child) {\n        this.children.push(child);\n    };\n    return Node;\n}());\nvar UctSearchService = (function () {\n    function UctSearchService() {\n    }\n    UctSearchService.prototype.search = function (rootState, maxIterations, maxTime) {\n        if (maxIterations === void 0) { maxIterations = 1000; }\n        if (maxTime === void 0) { maxTime = 1000; }\n        var root = new Node(null, rootState);\n        var startTime = Date.now();\n        var i;\n        for (i = 0; i < maxIterations; i++) {\n            var current = this.treePolicy(root, rootState);\n            var reward = this.defaultPolicy(current.state);\n            this.backup(current, reward);\n            if (Date.now() - startTime > maxTime) {\n                break;\n            }\n        }\n        var bestChild = this.bestChild(root, 0);\n        return {\n            move: bestChild.move,\n            winProbabilty: (bestChild.wins / bestChild.visits),\n            time: Date.now() - startTime,\n            iterations: i\n        };\n    };\n    UctSearchService.prototype.treePolicy = function (node, state) {\n        while (!node.isTerminal) {\n            if (!node.isfullyExpanded()) {\n                return this.expand(node);\n            }\n            else {\n                return this.bestChild(node, C);\n            }\n        }\n    };\n    UctSearchService.prototype.expand = function (node) {\n        var a = node.getUntriedMove();\n        var newState = node.state.doMove(a);\n        var newNode = new Node(node, newState, a);\n        node.addChild(newNode);\n        return newNode;\n    };\n    UctSearchService.prototype.defaultPolicy = function (state) {\n        var moves = state.getMoves();\n        while (moves.length > 0) {\n            var index = getRandomInteger(moves.length);\n            var move = moves[index];\n            state = state.doMove(move);\n            moves = state.getMoves();\n        }\n        asserts.assert(!state.hasMoves());\n        return function (node, player) {\n            var result = state.getResult(player);\n            switch (result) {\n                case game_model_1.Result.Draw:\n                    return 0.5;\n                case game_model_1.Result.Win:\n                    return 1;\n                default:\n                    return 0;\n            }\n        };\n    };\n    UctSearchService.prototype.backup = function (node, reward) {\n        while (node) {\n            var player = node.state.getOpponent(node.state.getPlayerToMove());\n            node.visits++;\n            node.wins += reward(node, player);\n            node = node.parent;\n        }\n    };\n    UctSearchService.prototype.bestChild = function (node, c) {\n        node.children.forEach(function (child) {\n            child.confidence = c * Math.sqrt(2 * Math.log(node.visits) / child.visits);\n            child.uctScore = (child.wins / child.visits) + child.confidence;\n        });\n        return collections_1.Arrays.max(node.children, function (a, b) { return a.uctScore > b.uctScore; });\n    };\n    return UctSearchService;\n}());\nexports.UctSearchService = UctSearchService;\nexports.UctSearchModule = angular.module('UctSearchModule', [])\n    .service('uctSearchService', UctSearchService);\n"]}